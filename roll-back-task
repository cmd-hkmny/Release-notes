$healthCheckTask = @{
    taskId      = "e213ff0f-5d5c-4791-802d-52ea3e7be1f1"  # PowerShell@2
    version     = "2.*"
    name        = "HealthCheckAndRollback"
    enabled     = $true
    inputs      = @{
        targetType  = "inline"
        script      = @'
# Enable TLS 1.2
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

# Configuration
$configFile = "$(ConfigFilePath)"  # Path to JSON config file passed as pipeline variable
$timeoutSeconds = 15
$idleTimeoutMs = 60000  # 60 seconds in milliseconds

# Initialize counters
$global:overallSuccess = $true
$global:anyRollbackAttempted = $false

# Load configuration from JSON file
try {
    $config = Get-Content -Path $configFile -Raw | ConvertFrom-Json
    Write-Host "Loaded configuration for $($config.applications.Count) applications"
    
    # Validate configuration
    if (-not $config.applications -or $config.applications.Count -eq 0) {
        throw "No applications configured in JSON file"
    }
}
catch {
    Write-Host "##vso[task.logissue type=error]Failed to load configuration: $($_.Exception.Message)"
    exit 1
}

function Invoke-HealthCheck {
    param (
        [string]$server,
        [string]$healthCheckUrl,
        [System.Management.Automation.PSCredential]$cred
    )
    
    try {
        Write-Host "`n=== Health Check on $server ($healthCheckUrl) ==="
        
        $sessionParams = @{
            ComputerName = $server
            Credential = $cred
            SessionOption = New-PSSessionOption -IdleTimeout $idleTimeoutMs
            ErrorAction = 'Stop'
        }
        $session = New-PSSession @sessionParams
        
        try {
            $null = Invoke-Command -Session $session -ScriptBlock { $true } -ErrorAction Stop
            
            $response = Invoke-Command -Session $session -ScriptBlock {
                param($url, $timeout)
                try {
                    if ($url -notmatch '^https?://(localhost|127\.0\.0\.1)') {
                        throw "Health check URL must use localhost or 127.0.0.1"
                    }
                    Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec $timeout
                } catch {
                    @{
                        StatusCode = 500
                        StatusDescription = $_.Exception.Message
                    }
                }
            } -ArgumentList $healthCheckUrl, $timeoutSeconds
            
            if ($response.StatusCode -eq 200) {
                Write-Host "[SUCCESS] Health check passed on $server"
                return $true
            } else {
                Write-Host "[FAILURE] Health check failed on $server (Status: $($response.StatusCode))"
                Write-Host "Response: $($response.StatusDescription)"
                return $false
            }
        }
        finally {
            if ($session) { Remove-PSSession $session -ErrorAction SilentlyContinue }
        }
    }
    catch {
        Write-Host "[ERROR] Connection/health check failed on $server"
        Write-Host "Details: $($_.Exception.Message)"
        return $false
    }
}

function Invoke-Rollback {
    param (
        [string]$server,
        [string]$deploymentRoot,
        [string]$webApplicationName,
        [System.Management.Automation.PSCredential]$cred
    )
    
    try {
        Write-Host "`n=== Attempting Rollback on $server ==="
        Write-Host "Application: $webApplicationName"
        Write-Host "Deployment Root: $deploymentRoot"
        
        $sessionParams = @{
            ComputerName = $server
            Credential = $cred
            SessionOption = New-PSSessionOption -IdleTimeout $idleTimeoutMs
            ErrorAction = 'Stop'
        }
        $session = New-PSSession @sessionParams
        
        try {
            # Verify deployment root exists
            $deploymentRootExists = Invoke-Command -Session $session -ScriptBlock {
                param($deploymentRoot)
                Test-Path $deploymentRoot
            } -ArgumentList $deploymentRoot

            if (-not $deploymentRootExists) {
                Write-Host "[ERROR] Deployment root path does not exist: $deploymentRoot"
                return $false
            }

            # Get available deployment folders
            $folders = Invoke-Command -Session $session -ScriptBlock {
                param($deploymentRoot)
                Get-ChildItem -Path $deploymentRoot -Directory |
                    Where-Object { $_.Name -match "^\d+(\.\d+)*_\d{8}\.\d{6}$" } |
                    Sort-Object {
                        $timestamp = $_.Name.Split("_")[1]
                        [datetime]::ParseExact($timestamp, "ddMMyyyy.HHmmss", $null)
                    } -Descending

            if ($folders.Count -gt 1) {
                $rollbackFolder = $folders[1].FullName
                Write-Host "Found rollback candidate: $rollbackFolder"
                
                # Perform the rollback
                $rollbackResult = Invoke-Command -Session $session -ScriptBlock {
                    param($rollbackFolder, $webApplicationName)
                    
                    try {
                        # Load IIS module if needed
                        if (-not (Get-Module -Name WebAdministration -ErrorAction SilentlyContinue)) {
                            Import-Module WebAdministration
                        }
                        
                        # Ensure IIS drive exists
                        if (-not (Test-Path 'IIS:\')) {
                            New-PSDrive -Name IIS -PSProvider WebAdministration -Root 'MACHINE/WEBROOT/APPHOST' -ErrorAction Stop | Out-Null
                        }
                        
                        $sitePath = "IIS:\Sites\Default Web Site\$webApplicationName"
                        if (-not (Test-Path $sitePath)) {
                            throw "IIS application path does not exist: $sitePath"
                        }
                        
                        $currentPath = (Get-ItemProperty -Path $sitePath).physicalPath
                        
                        if ($currentPath -ne $rollbackFolder) {
                            Set-ItemProperty -Path $sitePath -Name physicalPath -Value $rollbackFolder
                            Write-Host "Rollback successful. Path changed from:"
                            Write-Host "$currentPath"
                            Write-Host "to:"
                            Write-Host "$rollbackFolder"
                            return $true
                        } else {
                            Write-Host "Already pointing to rollback folder. No change needed."
                            return $false
                        }
                    } catch {
                        Write-Host "Rollback failed: $($_.Exception.Message)"
                        return $false
                    }
                } -ArgumentList $rollbackFolder, $webApplicationName
                
                return $rollbackResult
            } else {
                Write-Host "[ERROR] No suitable rollback folder found in $deploymentRoot"
                return $false
            }
        }
        finally {
            if ($session) { Remove-PSSession $session -ErrorAction SilentlyContinue }
        }
    }
    catch {
        Write-Host "[ERROR] Rollback failed on $server"
        Write-Host "Details: $($_.Exception.Message)"
        return $false
    }
}

# Main execution
try {
    # Get credentials from variable group
    $securePassword = ConvertTo-SecureString "$(AdminPassword)" -AsPlainText -Force
    $cred = New-Object System.Management.Automation.PSCredential("$(AdminUserName)", $securePassword)
    
    # Mask sensitive output
    Write-Host "Using service account: $(AdminUserName)"
    Write-Host "##vso[task.setvariable variable=AdminPassword]null"
    
    # Process each application
    foreach ($app in $config.applications) {
        Write-Host "`nProcessing application: $($app.name)"
        
        $appSuccess = $true
        $appRollbackAttempted = $false
        
        # Validate required properties
        $requiredProps = @('servers', 'deploymentRoot', 'webApplicationName', 'healthCheckUrl')
        foreach ($prop in $requiredProps) {
            if (-not $app.$prop) {
                Write-Host "##vso[task.logissue type=error]Application $($app.name) missing required property: $prop"
                $appSuccess = $false
                continue
            }
        }
        
        if (-not $appSuccess) { 
            $global:overallSuccess = $false
            continue 
        }
        
        # Process each server
        foreach ($server in $app.servers) {
            Write-Host "`n=== Processing server: $server ==="
            
            $healthStatus = Invoke-HealthCheck -server $server -healthCheckUrl $app.healthCheckUrl -cred $cred
            
            if (-not $healthStatus) {
                $appSuccess = $false
                $rollbackResult = Invoke-Rollback -server $server -deploymentRoot $app.deploymentRoot `
                    -webApplicationName $app.webApplicationName -cred $cred
                
                if ($rollbackResult) {
                    $appRollbackAttempted = $true
                    $global:anyRollbackAttempted = $true
                }
            }
        }
        
        # Application summary
        if ($appSuccess) {
            Write-Host "`n[APPLICATION RESULT] $($app.name) - All health checks passed"
        } elseif ($appRollbackAttempted) {
            Write-Host "`n[APPLICATION RESULT] $($app.name) - Health checks failed but rollback was attempted"
        } else {
            Write-Host "`n[APPLICATION RESULT] $($app.name) - Health checks failed and rollback could not be completed"
        }
        
        if (-not $appSuccess) { $global:overallSuccess = $false }
    }
    
    # Final status
    if ($global:overallSuccess) {
        Write-Host "`n[FINAL RESULT] All applications healthy"
        exit 0
    } elseif ($global:anyRollbackAttempted) {
        Write-Host "`n[FINAL RESULT] Some applications failed but rollbacks were attempted"
        exit 1
    } else {
        Write-Host "`n[FINAL RESULT] Applications failed and rollbacks could not be completed"
        exit 1
    }
}
catch {
    Write-Host "`n[CRITICAL ERROR] Unexpected failure in health check process"
    Write-Host "Details: $($_.Exception.Message)"
    exit 1
}
'@
    }
}
------------------------------------------------------------------------------------------------------
$healthCheckTask = @{
    taskId      = "e213ff0f-5d5c-4791-802d-52ea3e7be1f1"  # PowerShell@2
    version     = "2.*"
    name        = "HealthCheckAndRollback"
    enabled     = $true
    inputs      = @{
        targetType  = "inline"
        script      = @"
\$servers = @('CHEAAPIDV03', 'CHEAAPIDV04')  # Target servers
\$username = '$($ServerConfig.AdminUserName)'  # e.g., 'DOMAIN\\User'
\$password = ConvertTo-SecureString '$($ServerConfig.AdminPassword)' -AsPlainText -Force
\$cred = New-Object System.Management.Automation.PSCredential(\$username, \$password)

\$DeploymentRoot = '$($ServerConfig.DeploymentRoot)'
\$WebApplicationName = '$($ServerConfig.WebApplicationName)'

foreach (\$server in \$servers) {
    Write-Host "Connecting to \$server..."

    try {
        \$session = New-PSSession -ComputerName \$server -Credential \$cred -ErrorAction Stop

        \$response = Invoke-Command -Session \$session -ScriptBlock {
            Invoke-WebRequest -Uri 'http://localhost/api/health' -UseBasicParsing -TimeoutSec 10
        }

        if (\$response.StatusCode -eq 200) {
            Write-Host "Health check passed on \$server"
        } else {
            throw "Non-200 response: \$response.StatusCode"
        }

        Remove-PSSession \$session
    } catch {
        Write-Host "Health check failed or could not connect to \$server. Attempting rollback..."

        try {
            if (-not \$session) {
                \$session = New-PSSession -ComputerName \$server -Credential \$cred -ErrorAction Stop
            }

            \$folders = Invoke-Command -Session \$session -ScriptBlock {
                param(\$DeploymentRoot)
                Get-ChildItem -Path \$DeploymentRoot -Directory |
                    Where-Object { \$_.Name -match '^\d+(\.\d+)*_\d{8}\.\d{6}\$' } |
                    Sort-Object {
                        \$timestamp = \$_.Name.Split('_')[1]
                        [datetime]::ParseExact(\$timestamp, 'ddMMyyyy.HHmmss', \$null)
                    } -Descending
            } -ArgumentList \$DeploymentRoot

            if (\$folders.Count -gt 1) {
                \$rollbackFolder = \$folders[1].FullName
                Invoke-Command -Session \$session -ScriptBlock {
                    param(\$rollbackFolder, \$WebApplicationName)
                    Set-ItemProperty -Path "IIS:\\Sites\\Default Web Site\\\$WebApplicationName" -Name physicalPath -Value \$rollbackFolder
                } -ArgumentList \$rollbackFolder, \$WebApplicationName

                Write-Host "Rolled back to: \$rollbackFolder on \$server"
            } else {
                Write-Host "No rollback folder found on \$server"
            }

            Remove-PSSession \$session
        } catch {
            Write-Host "Rollback failed on \$server: \$($_.Exception.Message)"
            if (\$session) { Remove-PSSession \$session }
        }
    }
}
"@
    }
}

--------------------------------------------------------------------------
$healthCheckTask = @{
    taskId      = "e213ff0f-5d5c-4791-802d-52ea3e7be1f1"  # PowerShell@2
    version     = "2.*"
    name        = "HealthCheckAndRollback"
    enabled     = $true
    inputs      = @{
        targetType  = "inline"
        script      = @'
$servers = @("CHEAAPIDV03", "CHEAAPIDV04")  # Target servers
$username = "$(AdminUserName)"  # e.g., 'DOMAIN\User'
$password = ConvertTo-SecureString "$(AdminPassword)" -AsPlainText -Force
$cred = New-Object System.Management.Automation.PSCredential($username, $password)

$DeploymentRoot = "$(DeploymentRoot)"
$WebApplicationName = "$(WebApplicationName)"

foreach ($server in $servers) {
    Write-Host "Connecting to $server..."

    try {
        $session = New-PSSession -ComputerName $server -Credential $cred -ErrorAction Stop

        $response = Invoke-Command -Session $session -ScriptBlock {
            Invoke-WebRequest -Uri "http://localhost/api/health" -UseBasicParsing -TimeoutSec 10
        }

        if ($response.StatusCode -eq 200) {
            Write-Host "Health check passed on $server"
        } else {
            throw "Non-200 response: $($response.StatusCode)"
        }

        Remove-PSSession $session
    } catch {
        Write-Host "Health check failed or could not connect to $server. Attempting rollback..."

        try {
            if (-not $session) {
                $session = New-PSSession -ComputerName $server -Credential $cred -ErrorAction Stop
            }

            $folders = Invoke-Command -Session $session -ScriptBlock {
                param($DeploymentRoot)
                Get-ChildItem -Path $DeploymentRoot -Directory |
                    Where-Object { $_.Name -match "^\d+(\.\d+)*_\d{8}\.\d{6}$" } |
                    Sort-Object {
                        $timestamp = $_.Name.Split("_")[1]
                        [datetime]::ParseExact($timestamp, "ddMMyyyy.HHmmss", $null)
                    } -Descending
            } -ArgumentList $DeploymentRoot

            if ($folders.Count -gt 1) {
                $rollbackFolder = $folders[1].FullName
                Invoke-Command -Session $session -ScriptBlock {
                    param($rollbackFolder, $WebApplicationName)
                    Set-ItemProperty -Path ("IIS:\Sites\Default Web Site\" + $WebApplicationName) -Name physicalPath -Value $rollbackFolder
                } -ArgumentList $rollbackFolder, $WebApplicationName

                Write-Host "Rolled back to: $rollbackFolder on $server"
            } else {
                Write-Host "No rollback folder found on $server"
            }

            Remove-PSSession $session
        } catch {
            Write-Host "Rollback failed on $server: $($_.Exception.Message)"
            if ($session) { Remove-PSSession $session }
        }
    }
}
'@
    }
}
==================================================================

foreach ($server in $servers) {
    Write-Host "Connecting to $server..."

    try {
        $session = New-PSSession -ComputerName $server -Credential $cred -ErrorAction Stop

        try {
            $response = Invoke-Command -Session $session -ScriptBlock {
                Invoke-WebRequest -Uri "http://localhost/api/health" -UseBasicParsing -TimeoutSec 10
            }

            if ($response.StatusCode -eq 200) {
                Write-Host "Health check passed on $server"
            } else {
                throw "Non-200 response: $($response.StatusCode)"
            }
        }
        catch {
            Write-Host "Health check failed on $server. Attempting rollback..."

            $folders = Invoke-Command -Session $session -ScriptBlock {
                param($DeploymentRoot)
                Get-ChildItem -Path $DeploymentRoot -Directory |
                    Where-Object { $_.Name -match "^\d+(\.\d+)*_\d{8}\.\d{6}$" } |
                    Sort-Object {
                        $timestamp = $_.Name.Split("_")[1]
                        [datetime]::ParseExact($timestamp, "ddMMyyyy.HHmmss", $null)
                    } -Descending
            } -ArgumentList $DeploymentRoot

            if ($folders.Count -gt 1) {
                $rollbackFolder = $folders[1].FullName
                Invoke-Command -Session $session -ScriptBlock {
                    param($rollbackFolder, $WebApplicationName)
                    Set-ItemProperty -Path ("IIS:\Sites\Default Web Site\" + $WebApplicationName) -Name physicalPath -Value $rollbackFolder
                } -ArgumentList $rollbackFolder, $WebApplicationName

                Write-Host "Rolled back to: $rollbackFolder on $server"
            } else {
                Write-Host "No rollback folder found on $server"
            }
        }

        Remove-PSSession $session
    }
    catch {
        Write-Host "Could not connect to $server or unexpected error: $($_.Exception.Message)"
        if ($session) { Remove-PSSession $session }
    }
}
'@
    }
}
===========================================================================================
$healthCheckTask = @{
    taskId      = "e213ff0f-5d5c-4791-802d-52ea3e7be1f1"  # PowerShell@2
    version     = "2.*"
    name        = "HealthCheckAndRollback"
    enabled     = $true
    inputs      = @{
        targetType  = "inline"
        script      = @'
# Enable TLS 1.2
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

# Configuration
$servers = @("CHEAAPIDV03", "CHEAAPIDV04")
$DeploymentRoot = "$(DeploymentRoot)"
$WebApplicationName = "$(WebApplicationName)"
$healthCheckUrl = "http://localhost/api/health"
$timeoutSeconds = 15

# Initialize counters
$global:success = $true
$global:rollbackAttempted = $false

function Invoke-HealthCheck {
    param (
        [string]$server,
        [System.Management.Automation.PSCredential]$cred
    )
    
    try {
        Write-Host "`n=== Health Check on $server ==="
        
        # Create remote session
        $sessionParams = @{
            ComputerName = $server
            Credential = $cred
            SessionOption = New-PSSessionOption -IdleTimeout (($timeoutSeconds + 5) * 1000
            ErrorAction = 'Stop'
        }
        $session = New-PSSession @sessionParams
        
        try {
            # Test basic connectivity first
            $null = Invoke-Command -Session $session -ScriptBlock { $true } -ErrorAction Stop
            
            # Perform health check
            $response = Invoke-Command -Session $session -ScriptBlock {
                param($url, $timeout)
                try {
                    Invoke-WebRequest -Uri $url -UseBasicParsing -TimeoutSec $timeout
                } catch {
                    # Return the exception details if the request fails
                    @{
                        StatusCode = 500
                        StatusDescription = $_.Exception.Message
                    }
                }
            } -ArgumentList $healthCheckUrl, $timeoutSeconds
            
            if ($response.StatusCode -eq 200) {
                Write-Host "[SUCCESS] Health check passed on $server"
                return $true
            } else {
                Write-Host "[FAILURE] Health check failed on $server (Status: $($response.StatusCode))"
                Write-Host "Response: $($response.StatusDescription)"
                return $false
            }
        }
        finally {
            if ($session) { Remove-PSSession $session -ErrorAction SilentlyContinue }
        }
    }
    catch {
        Write-Host "[ERROR] Connection/health check failed on $server"
        Write-Host "Details: $($_.Exception.Message)"
        return $false
    }
}

function Invoke-Rollback {
    param (
        [string]$server,
        [System.Management.Automation.PSCredential]$cred
    )
    
    try {
        Write-Host "`n=== Attempting Rollback on $server ==="
        
        $sessionParams = @{
            ComputerName = $server
            Credential = $cred
            SessionOption = New-PSSessionOption -IdleTimeout 300000
            ErrorAction = 'Stop'
        }
        $session = New-PSSession @sessionParams
        
        try {
            # Get available deployment folders
            $folders = Invoke-Command -Session $session -ScriptBlock {
                param($DeploymentRoot)
                Get-ChildItem -Path $DeploymentRoot -Directory |
                    Where-Object { $_.Name -match "^\d+(\.\d+)*_\d{8}\.\d{6}$" } |
                    Sort-Object {
                        $timestamp = $_.Name.Split("_")[1]
                        [datetime]::ParseExact($timestamp, "ddMMyyyy.HHmmss", $null)
                    } -Descending
            } -ArgumentList $DeploymentRoot

            if ($folders.Count -gt 1) {
                $rollbackFolder = $folders[1].FullName
                Write-Host "Found rollback candidate: $rollbackFolder"
                
                # Perform the rollback
                $rollbackResult = Invoke-Command -Session $session -ScriptBlock {
                    param($rollbackFolder, $WebApplicationName)
                    try {
                        $sitePath = "IIS:\Sites\Default Web Site\$WebApplicationName"
                        $currentPath = (Get-ItemProperty -Path $sitePath).physicalPath
                        
                        if ($currentPath -ne $rollbackFolder) {
                            Set-ItemProperty -Path $sitePath -Name physicalPath -Value $rollbackFolder
                            Write-Host "Rollback successful. Path changed from:"
                            Write-Host "$currentPath"
                            Write-Host "to:"
                            Write-Host "$rollbackFolder"
                            return $true
                        } else {
                            Write-Host "Already pointing to rollback folder. No change needed."
                            return $false
                        }
                    } catch {
                        Write-Host "Rollback failed: $($_.Exception.Message)"
                        return $false
                    }
                } -ArgumentList $rollbackFolder, $WebApplicationName
                
                if ($rollbackResult) {
                    $script:global:rollbackAttempted = $true
                    Write-Host "[SUCCESS] Rollback completed on $server"
                } else {
                    Write-Host "[WARNING] Rollback not performed on $server"
                }
            } else {
                Write-Host "[ERROR] No suitable rollback folder found on $server"
            }
        }
        finally {
            if ($session) { Remove-PSSession $session -ErrorAction SilentlyContinue }
        }
    }
    catch {
        Write-Host "[ERROR] Rollback failed on $server"
        Write-Host "Details: $($_.Exception.Message)"
    }
}

# Main execution
try {
    # Create credentials (passed as pipeline variables)
    $securePassword = ConvertTo-SecureString "$(AdminPassword)" -AsPlainText -Force
    $cred = New-Object System.Management.Automation.PSCredential("$(AdminUserName)", $securePassword)
    
    # Perform health checks
    foreach ($server in $servers) {
        $healthStatus = Invoke-HealthCheck -server $server -cred $cred
        if (-not $healthStatus) {
            $global:success = $false
            Invoke-Rollback -server $server -cred $cred
        }
    }
    
    # Final status
    if ($global:success) {
        Write-Host "`n[RESULT] All health checks passed successfully"
        exit 0
    } elseif ($global:rollbackAttempted) {
        Write-Host "`n[RESULT] Health checks failed but rollback was attempted"
        exit 1
    } else {
        Write-Host "`n[RESULT] Health checks failed and rollback could not be completed"
        exit 1
    }
}
catch {
    Write-Host "`n[CRITICAL ERROR] Unexpected failure in health check process"
    Write-Host "Details: $($_.Exception.Message)"
    exit 1
}
'@
    }
}
---------------------------------------------------------------
foreach ($server in $servers) {
    # First test basic connectivity
    $connectionTest = Test-RemoteConnectivity -server $server -cred $cred
    
    if (-not $connectionTest) {
        Write-Host "##vso[task.logissue type=error]Cannot proceed - failed to connect to $server"
        $global:success = $false
        continue
    }
    
    # Only proceed with health check if connection test passed
------------------------------------------------------------------
function Test-RemoteConnectivity {
    param (
        [string]$server,
        [System.Management.Automation.PSCredential]$cred
    )
    
    try {
        Write-Host "`n=== Testing connection to $server ==="
        
        # Test basic WinRM connectivity first
        $sessionParams = @{
            ComputerName = $server
            Credential = $cred
            SessionOption = New-PSSessionOption -IdleTimeout 60000
            ErrorAction = 'Stop'
        }
        
        # Create session
        $session = New-PSSession @sessionParams
        Write-Host "[SUCCESS] Established PowerShell Remoting session to $server"
        
        try {
            # Test basic command execution
            $osInfo = Invoke-Command -Session $session -ScriptBlock {
                [PSCustomObject]@{
                    ComputerName = $env:COMPUTERNAME
                    OSVersion = [System.Environment]::OSVersion.VersionString
                    PSVersion = $PSVersionTable.PSVersion
                    Time = Get-Date
                    Disks = Get-Volume | Select-Object DriveLetter, SizeRemaining, Size
                }
            }
            
            Write-Host "`n[REMOTE SERVER DETAILS]"
            Write-Host "Computer Name: $($osInfo.ComputerName)"
            Write-Host "OS Version: $($osInfo.OSVersion)"
            Write-Host "PowerShell Version: $($osInfo.PSVersion)"
            Write-Host "Current Time: $($osInfo.Time)"
            
            Write-Host "`n[DISK INFORMATION]"
            $osInfo.Disks | ForEach-Object {
                $freeGB = [math]::Round($_.SizeRemaining/1GB, 2)
                $totalGB = [math]::Round($_.Size/1GB, 2)
                Write-Host "Drive $($_.DriveLetter): $freeGB GB free of $totalGB GB"
            }
            
            # List top 5 processes by memory usage
            $processes = Invoke-Command -Session $session -ScriptBlock {
                Get-Process | Sort-Object WS -Descending | Select-Object -First 5 | 
                Select-Object ProcessName, Id, WS, CPU
            }
            
            Write-Host "`n[TOP PROCESSES BY MEMORY]"
            $processes | ForEach-Object {
                $memMB = [math]::Round($_.WS/1MB, 2)
                Write-Host "$($_.ProcessName) (PID $($_.Id)): $memMB MB"
            }
            
            return $true
        }
        finally {
            if ($session) { Remove-PSSession $session -ErrorAction SilentlyContinue }
        }
    }
    catch {
        Write-Host "[ERROR] Failed to connect to $server"
        Write-Host "Details: $($_.Exception.Message)"
        return $false
    }
}
--------------------------------------------------------
# Import IIS module if not already loaded
                        if (-not (Get-Module -Name WebAdministration -ErrorAction SilentlyContinue)) {
                            Import-Module WebAdministration
                        }
                        
                        # Verify IIS drive exists
                        if (-not (Test-Path 'IIS:\')) {
                            New-PSDrive -Name IIS -PSProvider WebAdministration -Root 'MACHINE/WEBROOT/APPHOST' -ErrorAction Stop | Out-Null
                        }
                        
                        $sitePath = "IIS:\Sites\Default Web Site\$WebApplicationName"
                        if (-not (Test-Path $sitePath)) {
                            throw "IIS application path does not exist: $sitePath"
                        }
-------------------------------------------------------------------------------------------
