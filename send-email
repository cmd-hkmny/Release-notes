# Load SMTP Credentials from Azure DevOps Variable Group
$smtpUsername = "$(SMTP_USERNAME)"
$smtpPassword = "$(SMTP_PASSWORD)"

# Convert SMTP password securely
$securePassword = ConvertTo-SecureString $smtpPassword -AsPlainText -Force
$smtpCreds = New-Object System.Net.NetworkCredential($smtpUsername, $securePassword)

# SMTP Server Configuration
$smtpServer = "smtp.office365.com"  # Change for Gmail, AWS SES, etc.
$smtpPort = "587"

# Email Message
$emailFrom = $smtpUsername
$emailTo = "recipient@domain.com"
$emailSubject = "Release Notes for $app ($latestTag)"
$emailBody = $releaseNotes

# Create Email Object
$mailMessage = New-Object System.Net.Mail.MailMessage
$mailMessage.From = $emailFrom
$mailMessage.To.Add($emailTo)
$mailMessage.Subject = $emailSubject
$mailMessage.Body = $emailBody

# Create SMTP Client
$smtpClient = New-Object System.Net.Mail.SmtpClient($smtpServer, $smtpPort)
$smtpClient.EnableSsl = $true
$smtpClient.Credentials = $smtpCreds

# Send Email
$smtpClient.Send($mailMessage)
Write-Host "âœ… Email sent successfully for $app."


# Read Release Notes for Email Body
      $emailBody = Get-Content "release_notes.md" -Raw

      # Send Email via Azure DevOps REST API
      $emailRecipients = @("recipient@example.com")  # Replace with actual recipients

      $emailUrl = "$orgUrl/$projectName/_apis/notification?api-version=6.0"
      $headers = @{
          "Authorization" = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$ADO_PAT"))
          "Content-Type"  = "application/json"
      }

      $emailPayload = @{
          recipients = @(@{mail = $emailRecipients[0]})  # Supports multiple recipients
          message = @{
              subject = "Release Notes: $latestTag"
              body    = $emailBody
          }
      } | ConvertTo-Json -Depth 3

      Invoke-RestMethod -Uri $emailUrl -Headers $headers -Method Post -Body $emailPayload

      Write-Host "ðŸ“§ Email Sent Successfully!"


 Base64 encode PAT for authentication
$base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$($pat)"))

# Get commit hashes for both tags
$startCommit = (Invoke-RestMethod -Uri "https://dev.azure.com/$org/$project/_apis/git/repositories/$repo/refs?filter=tags/$startTag&api-version=6.0" -Headers @{Authorization = "Basic $base64AuthInfo"}).value[0].objectId
$endCommit = (Invoke-RestMethod -Uri "https://dev.azure.com/$org/$project/_apis/git/repositories/$repo/refs?filter=tags/$endTag&api-version=6.0" -Headers @{Authorization = "Basic $base64AuthInfo"}).value[0].objectId

# Get all PRs merged between these commits
$prs = Invoke-RestMethod -Uri "https://dev.azure.com/$org/$project/_apis/git/repositories/$repo/pullrequests?searchCriteria.status=completed&api-version=6.0" -Headers @{Authorization = "Basic $base64AuthInfo"}

# Filter PRs between the two commits
$filteredPRs = $prs.value | Where-Object {
    $_.mergeCommit.commitId -ge $startCommit -and $_.mergeCommit.commitId -le $endCommit
}

$filteredPRs | Select-Object pullRequestId, title, createdBy, creationDate, status
