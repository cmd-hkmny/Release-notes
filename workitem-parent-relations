if ($filteredWorkItems.Count -gt 0) {
    Write-Host "`nüìÇ Building full hierarchical work item tree..."

    $allWorkItems = @{}
    foreach ($item in $filteredWorkItems) {
        $allWorkItems[$item.id] = $item
    }

    # Recursively fetch all parent items
    foreach ($item in $filteredWorkItems) {
        $current = $item
        while ($current.fields.'System.Parent') {
            $parentId = $current.fields.'System.Parent'
            if (-not $allWorkItems.ContainsKey($parentId)) {
                try {
                    $parentItem = Invoke-RestMethod `
                        -Uri "$orgUrl/_apis/wit/workitems/$parentId?api-version=$WIT_API_VERSION" `
                        -Headers $authHeader
                    $allWorkItems[$parentId] = $parentItem
                    $current = $parentItem
                } catch {
                    Write-Host "‚ö†Ô∏è Failed to fetch parent item $parentId: $_"
                    break
                }
            } else {
                $current = $allWorkItems[$parentId]
            }
        }
    }

    # Build reverse parent-to-child tree
    $tree = @{}
    foreach ($item in $allWorkItems.Values) {
        $parentId = $item.fields.'System.Parent'
        if ($parentId) {
            if (-not $tree.ContainsKey($parentId)) {
                $tree[$parentId] = @()
            }
            $tree[$parentId] += $item
        }
    }

    # Dynamically identify true root items (those not children of any other item)
    $allChildIds = $tree.Values | ForEach-Object { $_.id } | Select-Object -Unique
    $rootItems = $allWorkItems.Values | Where-Object { -not $_.fields.'System.Parent' -or (-not $allWorkItems.ContainsKey($_.fields.'System.Parent')) }

    function Format-WorkItemTree {
        param (
            [Parameter(Mandatory = $true)][object]$workItem,
            [Parameter(Mandatory = $true)][ref]$content,
            [int]$level = 0
        )

        $indent = '  ' * $level
        $emojiMap = @{
            'Epic'    = 'üì¶'
            'Feature' = 'üåü'
            'Product Backlog Item' = 'üìå'
            'Bug'     = 'üêû'
            'Task'    = 'üîß'
        }
        $type = $workItem.fields.'System.WorkItemType'
        $icon = $emojiMap[$type] ?? 'üîπ'

        $content.Value += "$indent- $icon **$type #$($workItem.id)**: [$($workItem.fields.'System.Title')]($orgUrl/$PROJECT_NAME/_workitems/edit/$($workItem.id))`n"

        if ($tree.ContainsKey($workItem.id)) {
            foreach ($child in $tree[$workItem.id] | Sort-Object -Property id) {
                Format-WorkItemTree -workItem $child -content $content -level ($level + 1)
            }
        }
    }

    $mdContent += "`n## üìå **Work Items (Hierarchical)**`n"

    foreach ($root in $rootItems | Sort-Object -Property id) {
        Format-WorkItemTree -workItem $root -content ([ref]$mdContent)
    }
} else {
    $mdContent += "`n## üìå **Work Items**`n"
    $mdContent += "_No work items completed in this release._`n"
}
