param(
    [string]$Org,
    [string]$Project,
    [string]$Pat,
    [string]$ApiVersion = "7.1-preview.4",
    [string]$PipelineIds
)

$PipelineIds = $PipelineIds -split "," | ForEach-Object { [int]$_.Trim() }

$AuthHeader = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$Pat"))
$Headers = @{
    "Authorization" = $AuthHeader
    "Content-Type" = "application/json"
    "Accept" = "application/json; api-version=$ApiVersion"
}

Function Add-ProdStage {
    param ([int]$PipelineId)

    Write-Host "üöÄ Processing Pipeline ID: $PipelineId"

    $url = "https://vsrm.dev.azure.com/$Org/$Project/_apis/release/definitions/$($PipelineId)?api-version=$ApiVersion"
    try {
        $response = Invoke-RestMethod -Uri $url -Headers $Headers -Method Get
        $pipeline = $response | ConvertTo-Json -Depth 20 | ConvertFrom-Json
        Write-Host "‚úÖ Successfully fetched pipeline ID: $PipelineId"
    } catch {
        Write-Host "‚ùå ERROR: Failed to fetch pipeline ID: $PipelineId"
        Write-Host "üî¥ API Response: $_"
        return
    }

    Write-Host "üîç Available Stages in Pipeline ${PipelineId}:"
    $pipeline.environments | ForEach-Object { Write-Host "Stage: $($_.name) (ID: $($_.id))" }

    $preProdStage = $pipeline.environments | Where-Object { $_.name -eq 'pre-prod' } | Select-Object -First 1
    if ($null -eq $preProdStage) {
        Write-Host "‚ö†Ô∏è No pre-prod stage found in pipeline $PipelineId"
        return
    }

    Write-Host "‚úÖ Found pre-prod stage in pipeline $PipelineId (ID: $($preProdStage.id))"

    if ($pipeline.environments.name -contains 'prod') {
        Write-Host "‚ö†Ô∏è PROD stage already exists in pipeline $PipelineId"
        return
    }

    for ($i = 0; $i -lt $pipeline.environments.Count; $i++) {
        $pipeline.environments[$i].rank = $i + 1
    }

    $newRank = $pipeline.environments.Count + 1

    $prodStage = @{
        name = "prod"
        rank = $newRank
        owner = @{
            id = $pipeline.createdBy.id
            displayName = $pipeline.createdBy.displayName
        }
        variables = @{}
        variableGroups = @()
        preDeployApprovals = @{
            approvals = @(
                @{
                    rank = 1
                    isAutomated = $false
                    isNotificationOn = $false
                    approver = @{ 
                        id = "7a7ba7bf-0a4e-625b-b1fb-8dd3e8dcb937"
                        displayName = "Krishna Sri Ram"
                    }
                }
            )
            approvalOptions = @{
                requiredApproverCount = 1
                releaseCreatorCanBeApprover = $true
                autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped = $false
                enforceIdentityRevalidation = $false
                timeoutInMinutes = 43200
            }
        }
        postDeployApprovals = @{
            approvals = @()
            approvalOptions = @{
                requiredApproverCount = 0
                releaseCreatorCanBeApprover = $false
                autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped = $false
                enforceIdentityRevalidation = $false
                timeoutInMinutes = 43200
            }
        }
        deployPhases = @(
            @{
                name = "Run on agent"
                rank = 1
                phaseType = "agentBasedDeployment"
                workflowTasks = @()
            }
        )
        conditions = @(
            @{
                conditionType = "environmentState"
                name = "pre-prod"
                value = "succeeded"
            }
        )
        environmentOptions = @{
            emailNotificationType = "OnlyOnFailure"
            emailRecipients = "release.environment.owner;release.creator"
            skipArtifactsDownload = $false
            timeoutInMinutes = 0
            enableAccessToken = $false
            publishDeploymentStatus = $true
            badgeEnabled = $false
            autoLinkWorkItems = $false
        }
        retentionPolicy = @{
            daysToKeep = 30
            releasesToKeep = 3
            retainBuild = $true
        }
    }

    $prodStage = $prodStage | ConvertTo-Json -Depth 10 | ConvertFrom-Json
    $pipeline.environments += $prodStage

    for ($i = 0; $i -lt $pipeline.environments.Count; $i++) {
        $pipeline.environments[$i].rank = $i + 1
    }

    $updateUrl = "https://vsrm.dev.azure.com/$Org/$Project/_apis/release/definitions/$($PipelineId)?api-version=$ApiVersion"
    $jsonBody = $pipeline | ConvertTo-Json -Depth 15 -Compress

    try {
        $response = Invoke-RestMethod -Uri $updateUrl -Headers $Headers -Method Put -Body $jsonBody
        Write-Host "‚úÖ Successfully added PROD stage to Pipeline $PipelineId"
        Write-Host "üîπ Final Stage Order:"
        $response.environments | ForEach-Object { Write-Host "$($_.rank). $($_.name) (ID: $($_.id))" }
    } catch {
        Write-Host "‚ùå ERROR: Failed to update pipeline ID: $PipelineId"
        Write-Host "üî¥ Error Details: $($_.Exception.Message)"
        if ($_.Exception.Response) {
            $reader = New-Object System.IO.StreamReader($_.Exception.Response.GetResponseStream())
            $reader.BaseStream.Position = 0
            $reader.DiscardBufferedData()
            $responseBody = $reader.ReadToEnd()
            Write-Host "üî¥ Full API Response: $responseBody"
        }
    }
}

foreach ($PipelineId in $PipelineIds) {
    Add-ProdStage -PipelineId $PipelineId
}


trigger: none

parameters:
  - name: org
    type: string
    default: your-org-name
  - name: project
    type: string
    default: your-project-name
  - name: pipelineIds
    type: string
    default: '2'  # comma-separated list if needed

stages:
- stage: UpdateReleasePipeline
  displayName: 'Update Classic Release Pipeline'
  variables:
    - group: ADO_PAT  # <- pulls in your 'pat' variable securely
  jobs:
  - job: AddProdStage
    displayName: 'Add PROD stage to release pipeline'
    pool:
      vmImage: 'windows-latest'
    steps:
    - checkout: self

    - task: PowerShell@2
      displayName: 'Run prod-stage-creation.ps1'
      inputs:
        targetType: 'filePath'
        filePath: 'prod-stage-creation.ps1'
        arguments: >
          -Org "$(org)"
          -Project "$(project)"
          -Pat "$(pat)"
          -PipelineIds "$(pipelineIds)"


# Replace these values
$Org = "your-org-name"
$Pat = "your-personal-access-token"

$Headers = @{
    Authorization = ("Basic {0}" -f [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$Pat")))
    Accept = "application/json"
}

# Get current authenticated user profile
$url = "https://vssps.dev.azure.com/$Org/_apis/profile/profiles/me?api-version=7.1-preview.1"

$response = Invoke-RestMethod -Uri $url -Headers $Headers -Method Get
Write-Host "üîπ Display Name: $($response.displayName)"
Write-Host "üîπ Email: $($response.emailAddress)"
Write-Host "üîπ ID: $($response.id)"  # This is the GUID you can use for approvals

