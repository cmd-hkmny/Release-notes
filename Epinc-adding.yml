trigger: none

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: MANUAL_PAT
  - name: WIKI_ID
    value: 'App-03 wiki' # Your wiki identifier
  - name: WIKI_FOLDER
    value: 'Release-Notes'
  - name: RELEASE_NOTES_FILE
    value: '$(WIKI_FOLDER)/$(Build.Repository.Name)-$(Build.BuildNumber).md'
  - name: WIKI_BRANCH
    value: 'main' # Target branch for wiki updates
  - name: ARTIFACT_NAME
    value: 'ReleaseNotes.md'

steps:
- checkout: self

- task: PowerShell@2
  displayName: "Generate Release Notes"
  inputs:
    targetType: 'inline'
    script: |
      # Define Variables
      $ORG_NAME = "chand1502877"
      $PROJECT_NAME = "DevOps_pro1"
      $REPO_NAME = "App-03"
      $orgUrl = "https://dev.azure.com/$ORG_NAME"
      $WIKI_FOLDER = "$(WIKI_FOLDER)"
      $ARTIFACT_DIR = "$(Build.ArtifactStagingDirectory)/$(ARTIFACT_NAME)"

      # Create artifact directory
      New-Item -ItemType Directory -Path $ARTIFACT_DIR -Force | Out-Null

      # API Versions
      $GIT_API_VERSION = "7.1-preview.1"
      $WIT_API_VERSION = "7.0"

      # Authentication
      $PERSONAL_ACCESS_TOKEN = "$(MANUAL_PAT)"
      $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$PERSONAL_ACCESS_TOKEN"))
      $authHeader = @{
          Authorization = "Basic $base64AuthInfo"
          "Content-Type" = "application/json"
      }

      # Clone the source repository
      $sourceDir = "$(Build.SourcesDirectory)/source_repo"
      if (Test-Path $sourceDir) { Remove-Item $sourceDir -Recurse -Force }
      Write-Host "Cloning source repository..."
      git clone "https://$PERSONAL_ACCESS_TOKEN@dev.azure.com/$ORG_NAME/$PROJECT_NAME/_git/$REPO_NAME" $sourceDir
      
      # Move to source directory
      Set-Location $sourceDir

      # Fetch tags
      Write-Host "Processing tags..."
      $tags = git tag --sort=-creatordate
      $latestTag = $tags | Select-Object -First 1
      $previousTag = $tags | Select-Object -Skip 1 -First 1

      if (-not $previousTag) { 
          Write-Host "Only one tag found, using first commit as base"
          $previousTag = git rev-list --max-parents=0 HEAD 
      }

      Write-Host "Getting commits between $previousTag and $latestTag"
      $commitList = @(git log --pretty=format:"%H" "$previousTag..$latestTag")
      $commitCount = $commitList.Count

      # Get merged PRs
      Write-Host "Fetching merged pull requests..."
      $prResponse = Invoke-RestMethod `
          -Uri "$orgUrl/$PROJECT_NAME/_apis/git/repositories/$REPO_NAME/pullrequests?searchCriteria.status=completed&api-version=$GIT_API_VERSION" `
          -Headers $authHeader
      
      $filteredPRs = @($prResponse.value | Where-Object { $commitList -contains $_.lastMergeCommit.commitId })
      $prCount = $filteredPRs.Count

      # Function to get parent work item with better error handling
      function Get-ParentWorkItem {
          param(
              [Parameter(Mandatory=$true)]
              $workItem,
              [Parameter(Mandatory=$true)]
              $authHeader,
              [Parameter(Mandatory=$true)]
              $orgUrl,
              [Parameter(Mandatory=$true)]
              $projectName
          )
          
          try {
              # Check if work item has any relations
              if (-not $workItem.relations) {
                  Write-Host "Work item $($workItem.id) has no relations"
                  return $null
              }

              # Find parent relation
              $parentRelation = $workItem.relations | Where-Object { $_.rel -eq "System.LinkTypes.Hierarchy-Reverse" } | Select-Object -First 1
              
              if (-not $parentRelation) {
                  Write-Host "Work item $($workItem.id) has no parent relation"
                  return $null
              }

              # Extract parent ID from URL
              $parentId = $parentRelation.url -split '/' | Select-Object -Last 1
              if (-not $parentId) {
                  Write-Host "Could not extract parent ID from relation URL"
                  return $null
              }

              # Get parent work item details
              $parentUri = "$orgUrl/$projectName/_apis/wit/workitems/$($parentId)?api-version=$WIT_API_VERSION"
              Write-Host "Fetching parent work item from: $parentUri"
              
              $parentItem = Invoke-RestMethod -Uri $parentUri -Headers $authHeader
              
              return @{
                  Id = $parentItem.id
                  Title = $parentItem.fields.'System.Title'
                  Type = $parentItem.fields.'System.WorkItemType'
                  Url = "$orgUrl/$projectName/_workitems/edit/$($parentItem.id)"
              }
          }
          catch {
              Write-Host "Error getting parent for work item $($workItem.id): $($_.Exception.Message)"
              return $null
          }
      }

      # Get linked work items (full hierarchy)
      Write-Host "Fetching linked work items with full hierarchy..."
      $allWorkItems = @{}

      if ($filteredPRs.Count -gt 0) {
          $prIds = $filteredPRs.pullRequestId -join ","
          Write-Host "Processing PRs: $prIds"
          
          foreach ($pr in $filteredPRs) {
              try {
                  Write-Host "Getting work items for PR $($pr.pullRequestId)"
                  $linkedWorkItems = Invoke-RestMethod `
                      -Uri "$orgUrl/$PROJECT_NAME/_apis/git/repositories/$REPO_NAME/pullRequests/$($pr.pullRequestId)/workitems?api-version=$GIT_API_VERSION" `
                      -Headers $authHeader

                  foreach ($link in $linkedWorkItems.value) {
                      $workItemId = $link.id
                      if (-not $allWorkItems.ContainsKey($workItemId)) {
                          $item = Invoke-RestMethod `
                              -Uri "$orgUrl/_apis/wit/workitems/$($workItemId)?`$expand=relations&api-version=$WIT_API_VERSION" `
                              -Headers $authHeader
                          $allWorkItems[$workItemId] = $item
                      }
                  }
              } catch {
                  Write-Host "Error fetching work items for PR $($pr.pullRequestId): $($_.Exception.Message)"
              }
          }
      }

      function Get-FullHierarchy {
          param (
              [Parameter(Mandatory=$true)] $workItem,
              [Parameter(Mandatory=$true)] $authHeader,
              [Parameter(Mandatory=$true)] $orgUrl,
              [Parameter(Mandatory=$true)] $projectName
          )

          $hierarchy = @()
          $currentItem = $workItem

          while ($true) {
              # Add current item to hierarchy
              $hierarchy += [PSCustomObject]@{
                  Id = $currentItem.id
                  Title = $currentItem.fields.'System.Title'
                  Type = $currentItem.fields.'System.WorkItemType'
                  Url = "$orgUrl/$projectName/_workitems/edit/$($currentItem.id)"
              }

              # Find parent relation
              $parentRel = $currentItem.relations | Where-Object { $_.rel -eq "System.LinkTypes.Hierarchy-Reverse" } | Select-Object -First 1
              if (-not $parentRel) { break }

              $parentId = $parentRel.url -split '/' | Select-Object -Last 1
              if (-not $parentId) { break }

              $parentUri = "$orgUrl/$projectName/_apis/wit/workitems/$parentId?`$expand=relations&api-version=$WIT_API_VERSION"
              try {
                  $currentItem = Invoke-RestMethod -Uri $parentUri -Headers $authHeader
              } catch {
                  break
              }
          }

          # Reverse so that Epic -> ... -> Child
          return $hierarchy | Sort-Object {[array]::IndexOf(@('Epic','Feature','Product Backlog Item','Bug','Task','Issue'), $_.Type)}
      }


      # Generate Work Item Hierarchy
      $groupedItems = @{}

      foreach ($entry in $workItemsWithParents) {
          $hierarchy = Get-FullHierarchy -workItem $item -authHeader $authHeader -orgUrl $orgUrl -projectName $PROJECT_NAME

          $epic = $hierarchy | Where-Object { $_.Type -eq 'Epic' } | Select-Object -First 1
          $feature = $hierarchy | Where-Object { $_.Type -eq 'Feature' } | Select-Object -First 1
          $child = $hierarchy | Where-Object { $_.Type -in @('Product Backlog Item','Bug','Task','Issue') } | Select-Object -First 1

          if (-not $epic) { $epic = @{ Id = 0; Title = "Orphaned"; Url = "#"; Type = "None" } }

          if (-not $groupedItems.ContainsKey($epic.Id)) {
              $groupedItems[$epic.Id] = @{
                  Epic = $epic
                  Features = @{}
              }
          }

          if ($feature) {
              if (-not $groupedItems[$epic.Id].Features.ContainsKey($feature.Id)) {
                  $groupedItems[$epic.Id].Features[$feature.Id] = @{
                      Feature = $feature
                      Children = @{}
                  }
              }
              $groupedItems[$epic.Id].Features[$feature.Id].Children[$child.Id] = $child
          } else {
              # No feature level, directly under Epic
              $groupedItems[$epic.Id].Features["none-$($child.Id)"] = @{
                  Feature = $null
                  Children = @{ $child.Id = $child }
              }
          }
      }

      # Render Markdown
      $mdContent += "## Work Items`n"

      foreach ($epicGroup in $groupedItems.Values) {
          $epic = $epicGroup.Epic
          if ($epic.Type -ne 'None') {
              $mdContent += "* üß© **$($epic.Type) #$($epic.Id)**: [$($epic.Title)]($($epic.Url))`n"
          }

          foreach ($featureGroup in $epicGroup.Features.Values) {
              if ($featureGroup.Feature) {
                  $f = $featureGroup.Feature
                  $mdContent += "  * üìÅ **$($f.Type) #$($f.Id)**: [$($f.Title)]($($f.Url))`n"
              }

              foreach ($c in $featureGroup.Children.Values | Sort-Object Id) {
                  $mdContent += "    * üîß **$($c.Type) #$($c.Id)**: [$($c.Title)]($($c.Url))`n"
              }
          }

          $mdContent += "`n"
      }
  

      if ($prCount -gt 0) {
          $mdContent += "## Pull Requests`n"
          $mdContent += ($filteredPRs | Sort-Object -Property pullRequestId | ForEach-Object {
              "* **PR #$($_.pullRequestId)**: [$($_.title)]($orgUrl/$PROJECT_NAME/_git/$REPO_NAME/pullrequest/$($_.pullRequestId)) (Created by $($_.createdBy.displayName) on $([datetime]$_.creationDate.ToString('yyyy-MM-dd')))"
          }) -join "`n"
          $mdContent += "`n`n"
      }

      $mdContent += "[[_Back to Releases|Home]]`n"

      # Save to artifact directory
      $artifactFilePath = "$ARTIFACT_DIR/$REPO_NAME-$latestTag.md"
      Write-Host "Saving release notes to artifact: $artifactFilePath"
      $mdContent | Out-File -FilePath $artifactFilePath -Encoding utf8

      # Set variables for next steps
      Write-Host "##vso[task.setvariable variable=RELEASE_NOTES_CONTENT]$mdContent"
      Write-Host "##vso[task.setvariable variable=RELEASE_NOTES_FILE]$artifactFilePath"
      Write-Host "##vso[task.setvariable variable=RELEASE_NOTES_PATH]$WIKI_FOLDER/$REPO_NAME-$latestTag"

- task: PublishBuildArtifacts@1
  displayName: 'Publish Release Notes Artifact'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(ARTIFACT_NAME)'
    ArtifactName: '$(ARTIFACT_NAME)'
    publishLocation: 'Container'

- task: PowerShell@2
  displayName: "Upload Release Notes to Code Wiki"
  inputs:
    targetType: 'inline'
    script: |
      # Define Variables
      $ORG_NAME = "chand1502877"
      $PROJECT_NAME = "DevOps_pro1"
      $WIKI_ID = "$(WIKI_ID)"
      $WIKI_BRANCH = "$(WIKI_BRANCH)"
      $WIKI_FOLDER = "$(WIKI_FOLDER)"
      $RELEASE_NOTES_FILE = "$(RELEASE_NOTES_FILE)"
      #$WIKI_API_URL = "https://dev.azure.com/$ORG_NAME/$PROJECT_NAME/_apis/wiki/wikis/$WIKI_ID/pages?path=/$WIKI_FOLDER/$(Build.Repository.Name)-$(Build.BuildNumber).md&api-version=7.1-preview.1"
      $WIKI_API_URL = "https://dev.azure.com/$ORG_NAME/$PROJECT_NAME/_apis/wiki/wikis/$WIKI_ID/pages?path=/$WIKI_FOLDER/$RELEASE_NOTES_FILE&api-version=7.1-preview.1&versionDescriptor.versionType=branch&versionDescriptor.version=$WIKI_BRANCH"

      # Authentication
      $PERSONAL_ACCESS_TOKEN = "$(MANUAL_PAT)"
      $base64AuthInfo = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$PERSONAL_ACCESS_TOKEN"))
      $authHeader = @{
          Authorization = "Basic $base64AuthInfo"
          "Content-Type" = "application/json"
      }

      # Read Markdown Content
      $content = Get-Content -Raw -Path $RELEASE_NOTES_FILE

      # Create JSON Payload
      $jsonBody = @{
          content = $content
      } | ConvertTo-Json -Depth 2

      # Upload to Wiki
      Write-Host "Uploading Release Notes to Code Wiki..."
      try {
          Invoke-RestMethod -Uri $WIKI_API_URL -Method Put -Headers $authHeader -Body $jsonBody
          Write-Host "‚úÖ Successfully uploaded release notes to the Code Wiki."
      } catch {
          Write-Host "‚ùå Failed to upload release notes: $_"
      }
