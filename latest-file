# Work Items Tree - Full Hierarchy Solution
if ($filteredWorkItems.Count -gt 0) {
    Write-Host "üìÇ Building complete work item hierarchy (Epic‚ÜíFeature‚ÜíPBI/Bug/Task)..."

    # Step 1: Collect all work items and build relationship maps
    $allWorkItems = @{}
    $childToParentMap = @{}
    $parentToChildrenMap = @{}
    $missingParents = @{}
    
    # First pass - collect all work items
    foreach ($item in $filteredWorkItems) {
        if ($item -and $item.id -and $item.fields) {
            $allWorkItems[$item.id] = $item
        }
    }

    # Step 2: Build complete relationship hierarchy
    $maxDepth = 5  # Prevent infinite loops
    $processedItems = @{}
    
    function ProcessItemRelations {
        param($itemId, $currentDepth = 0)
        
        if ($currentDepth -ge $maxDepth -or $processedItems[$itemId]) { return }
        $processedItems[$itemId] = $true
        
        try {
            $wiWithRelations = Invoke-RestMethod `
                -Uri "$orgUrl/$PROJECT_NAME/_apis/wit/workitems/$($itemId)?`$expand=relations&api-version=$WIT_API_VERSION" `
                -Headers $authHeader `
                -ErrorAction Stop
            
            foreach ($relation in $wiWithRelations.relations) {
                if ($relation.rel -eq "System.LinkTypes.Hierarchy-Reverse") {
                    $parentId = [int]($relation.url -split '/')[-1]
                    
                    # Record relationship
                    $childToParentMap[$itemId] = $parentId
                    if (-not $parentToChildrenMap.ContainsKey($parentId)) {
                        $parentToChildrenMap[$parentId] = @()
                    }
                    $parentToChildrenMap[$parentId] += $itemId
                    
                    # Fetch parent if not already loaded
                    if (-not $allWorkItems.ContainsKey($parentId)) {
                        try {
                            $parentItem = Invoke-RestMethod `
                                -Uri "$orgUrl/$PROJECT_NAME/_apis/wit/workitems/$($parentId)?api-version=$WIT_API_VERSION" `
                                -Headers $authHeader `
                                -ErrorAction Stop
                            
                            if ($parentItem -and $parentItem.id -and $parentItem.fields) {
                                $allWorkItems[$parentId] = $parentItem
                                Write-Host "‚úÖ Found parent item $parentId (type: $($parentItem.fields.'System.WorkItemType')) for child $itemId"
                                ProcessItemRelations $parentId ($currentDepth + 1)
                            }
                        } catch {
                            Write-Host "‚ö†Ô∏è Could not fetch parent item $parentId: $($_.Exception.Message)"
                            $missingParents[$parentId] = $true
                            # Add placeholder
                            $allWorkItems[$parentId] = @{
                                id = $parentId
                                fields = @{
                                    'System.WorkItemType' = 'Unknown'
                                    'System.Title' = '[Parent not accessible]'
                                }
                                url = "$orgUrl/$PROJECT_NAME/_workitems/edit/$parentId"
                            }
                        }
                    }
                }
            }
        } catch {
            Write-Host "‚ö†Ô∏è Failed to fetch relations for item ${itemId}: $($_.Exception.Message)"
        }
    }

    # Process all items to build complete hierarchy
    foreach ($itemId in $allWorkItems.Keys) {
        ProcessItemRelations $itemId
    }

    # Step 3: Define display settings
    $emojiMap = @{
        'Epic'    = 'üì¶'
        'Feature' = 'üåü'
        'Product Backlog Item' = 'üìå'
        'Bug'     = 'üêû'
        'Task'    = 'üîß'
        'User Story' = 'üìñ'
        'Issue'   = '‚ùó'
        'Unknown' = '‚ùì'
    }

    $typeOrder = @('Epic','Feature','Product Backlog Item','User Story','Bug','Task','Issue','Unknown')

    # Step 4: Build the hierarchy display
    function Build-HierarchyDisplay {
        param (
            [Parameter(Mandatory)][int]$itemId,
            [Parameter(Mandatory)][hashtable]$allItems,
            [Parameter(Mandatory)][hashtable]$childToParentMap,
            [Parameter(Mandatory)][hashtable]$parentToChildrenMap,
            [Parameter(Mandatory)][hashtable]$emojiMap,
            [int]$level = 0
        )

        $item = $allItems[$itemId]
        if (-not $item -or -not $item.fields) { return "" }

        $indent = '    ' * $level
        $type = $item.fields.'System.WorkItemType' ?? 'Unknown'
        $icon = $emojiMap[$type] ?? 'üîπ'

        $display = "$indent- $icon **$type #$($item.id)**: [$($item.fields.'System.Title')]($($item.url ?? "$orgUrl/$PROJECT_NAME/_workitems/edit/$itemId"))`n"

        if ($parentToChildrenMap.ContainsKey($itemId)) {
            # Sort children by work item type and then by ID
            $sortedChildren = $parentToChildrenMap[$itemId] | Sort-Object {
                $childType = $allItems[$_].fields.'System.WorkItemType' ?? 'Unknown'
                $typeOrder.IndexOf($childType), $_
            }
            
            foreach ($childId in $sortedChildren) {
                if ($allItems.ContainsKey($childId)) {
                    $display += Build-HierarchyDisplay `
                        -itemId $childId `
                        -allItems $allItems `
                        -childToParentMap $childToParentMap `
                        -parentToChildrenMap $parentToChildrenMap `
                        -emojiMap $emojiMap `
                        -level ($level + 1)
                }
            }
        }

        return $display
    }

    # Step 5: Generate the output
    $mdContent += "`n## üå≥ **Complete Work Item Hierarchy**`n"
    
    # Find root items (items without parents in our set)
    $rootItems = $allWorkItems.Values | Where-Object { 
        -not $childToParentMap.ContainsKey($_.id) -and 
        $_.fields.'System.WorkItemType' -in @('Epic','Feature','Product Backlog Item')
    } | Sort-Object { 
        $typeOrder.IndexOf($_.fields.'System.WorkItemType'), $_.id
    }

    if ($rootItems.Count -gt 0) {
        foreach ($rootItem in $rootItems) {
            $mdContent += Build-HierarchyDisplay `
                -itemId $rootItem.id `
                -allItems $allWorkItems `
                -childToParentMap $childToParentMap `
                -parentToChildrenMap $parentToChildrenMap `
                -emojiMap $emojiMap
        }
    } else {
        $mdContent += "_No Epics/Features found at root level. Showing all items:_`n"
        $allItemsSorted = $allWorkItems.Values | Sort-Object { 
            $typeOrder.IndexOf($_.fields.'System.WorkItemType'), $_.id
        }
        
        foreach ($item in $allItemsSorted) {
            $type = $item.fields.'System.WorkItemType' ?? 'Unknown'
            $icon = $emojiMap[$type] ?? 'üîπ'
            $parentInfo = if ($childToParentMap.ContainsKey($item.id)) { " (child of #$($childToParentMap[$item.id]))" }
            $mdContent += "- $icon **$type #$($item.id)$parentInfo**: [$($item.fields.'System.Title')]($($item.url ?? "$orgUrl/$PROJECT_NAME/_workitems/edit/$($item.id)"))`n"
        }
    }

    # Show missing parents if any
    if ($missingParents.Count -gt 0) {
        $mdContent += "`n### üîç Missing Parent References`n"
        $mdContent += "The following parent work items are referenced but couldn't be loaded:`n"
        foreach ($missingId in ($missingParents.Keys | Sort-Object)) {
            $mdContent += "- ‚ùì #$missingId`n"
        }
    }
}
