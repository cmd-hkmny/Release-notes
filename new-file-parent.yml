# Get Work Item Details
        function Get-WorkItemDetails {
            param($id)
            if (-not $id) {
                Write-Warning "Skipped work item with null ID"
                return $null
            }
            $uri = "$orgUrl/$PROJECT_NAME/_apis/wit/workitems/${id}?`$expand=relations&api-version=$WIT_API_VERSION"
            try {
                $result = Invoke-RestMethod -Uri $uri -Headers $authHeader -ErrorAction SilentlyContinue
                if ($result) {
                    return [PSCustomObject]@{
                        Id = $result.id
                        Title = $result.fields.'System.Title'
                        Type = $result.fields.'System.WorkItemType'
                        Url = "$orgUrl/$PROJECT_NAME/_workitems/edit/$($result.id)"
                        Relations = $result.relations
                    }
                }
            } catch {
                Write-Warning "Failed to fetch work item ${id}: $_"
            }
            return $null
        }

        # Collect work items
        $allWorkItems = @{}
        $childWorkItems = @()

        foreach ($pr in $filteredPRs) {
            $workItems = Invoke-RestMethod -Uri "$orgUrl/$PROJECT_NAME/_apis/git/repositories/$REPO_NAME/pullRequests/$($pr.pullRequestId)/workitems?api-version=$GIT_API_VERSION" -Headers $authHeader
            foreach ($item in $workItems.value) {
                $wi = Get-WorkItemDetails -id $item.id
                if ($wi -and $wi.Type -in @('Product Backlog Item', 'Bug', 'Feature', 'Task', 'Issue', 'User Story', 'Epic')) {
                    if (-not $allWorkItems.ContainsKey($wi.Id)) {
                        $allWorkItems[$wi.Id] = $wi
                        $childWorkItems += $wi
                    }
                }
            }
        }

        # Build hierarchy
        $hierarchies = @()

        function Get-FullHierarchy {
            param($item)
            $hierarchy = @()
            $current = $item
            while ($current) {
                $hierarchy += $current
                $parentRel = $current.Relations | Where-Object { $_.rel -eq "System.LinkTypes.Hierarchy-Reverse" } | Select-Object -First 1
                if (-not $parentRel) { break }
                $parentId = $parentRel.url -split '/' | Select-Object -Last 1
                if (-not $allWorkItems.ContainsKey($parentId)) {
                    $parent = Get-WorkItemDetails -id $parentId
                    if ($parent) {
                        $allWorkItems[$parentId] = $parent
                    } else {
                        break
                    }
                }
                $current = $allWorkItems[$parentId]
            }
            [Array]::Reverse($hierarchy)
            return $hierarchy
        }

        $seen = @{}
        foreach ($item in $childWorkItems) {
            $hierarchy = Get-FullHierarchy -item $item
            $key = ($hierarchy | ForEach-Object { $_.Id }) -join '-'
            if (-not $seen.ContainsKey($key)) {
                $hierarchies += ,$hierarchy
                $seen[$key] = $true
            }
        }

        # Generate markdown
        Write-Host "Generating release notes..."
        $mdContent = "# Release Notes for $REPO_NAME`n`n"
        $mdContent += "**Release Range**: $previousTag to $latestTag`n"
        $mdContent += "**Date**: $(Get-Date -Format 'yyyy-MM-dd')`n"
        $mdContent += "**Commits Included**: $commitCount`n"
        $mdContent += "**Pull Requests Merged**: $prCount`n"
        $mdContent += "**Work Items Completed**: $($childWorkItems.Count)`n`n"

        if ($hierarchies.Count -gt 0) {
            $mdContent += "## Work Items Hierarchy`n"
            foreach ($hierarchy in $hierarchies) {
                for ($i = 0; $i -lt $hierarchy.Count; $i++) {
                    $item = $hierarchy[$i]
                    $indent = "  " * $i
                    $icon = if ($i -eq $hierarchy.Count - 1) { "üîß" } elseif ($i -eq 0) { "üè∞" } else { "üß©" }
                    $mdContent += "$indent* $icon **$($item.Type) #$($item.Id)**: [$($item.Title)]($($item.Url))`n"
                }
                $mdContent += "`n"
            }
        }

        if ($prCount -gt 0) {
            $mdContent += "## Pull Requests`n"
            $mdContent += ($filteredPRs | Sort-Object -Property pullRequestId | ForEach-Object {
                $prDate = [datetime]::Parse($_.creationDate)
                "* **PR #$($_.pullRequestId)**: [$($_.title)]($orgUrl/$PROJECT_NAME/_git/$REPO_NAME/pullrequest/$($_.pullRequestId)) (Created by $($_.createdBy.displayName) on $($prDate.ToString('yyyy-MM-dd')))"
            }) -join "`n"
            $mdContent += "`n`n"
        }

        $mdContent += "[[_Back to Releases|Home]]`n"

        $artifactFilePath = "$ARTIFACT_DIR/$REPO_NAME-$latestTag.md"
        $mdContent | Out-File -FilePath $artifactFilePath -Encoding utf8

        Write-Host "##vso[task.setvariable variable=RELEASE_NOTES_CONTENT]$mdContent"
        Write-Host "##vso[task.setvariable variable=RELEASE_NOTES_FILE]$artifactFilePath"
        Write-Host "##vso[task.setvariable variable=RELEASE_NOTES_PATH]$WIKI_FOLDER/$REPO_NAME-$latestTag"
