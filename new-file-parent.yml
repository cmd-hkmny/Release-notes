      # Clone the source repository
      $sourceDir = "$(Build.SourcesDirectory)/source_repo"
      if (Test-Path $sourceDir) { Remove-Item $sourceDir -Recurse -Force }
      Write-Host "Cloning source repository..."
      git clone "https://$PERSONAL_ACCESS_TOKEN@dev.azure.com/$ORG_NAME/$PROJECT_NAME/_git/$REPO_NAME" $sourceDir
      
      # Move to source directory
      Set-Location $sourceDir

      # Fetch tags
      Write-Host "Processing tags..."
      $tags = git tag --sort=-creatordate
      $latestTag = $tags | Select-Object -First 1
      $previousTag = $tags | Select-Object -Skip 1 -First 1

      if (-not $previousTag) { 
          Write-Host "Only one tag found, using first commit as base"
          $previousTag = git rev-list --max-parents=0 HEAD 
      }

      Write-Host "Getting commits between $previousTag and $latestTag"
      $commitList = @(git log --pretty=format:"%H" "$previousTag..$latestTag")
      $commitCount = $commitList.Count

      # Get merged PRs
      Write-Host "Fetching merged pull requests..."
      $prResponse = Invoke-RestMethod `
          -Uri "$orgUrl/$PROJECT_NAME/_apis/git/repositories/$REPO_NAME/pullrequests?searchCriteria.status=completed&api-version=$GIT_API_VERSION" `
          -Headers $authHeader
      
      $filteredPRs = @($prResponse.value | Where-Object { $commitList -contains $_.lastMergeCommit.commitId })
      $prCount = $filteredPRs.Count

      # Function to get parent work item with better error handling
      function Get-ParentWorkItem {
          param(
              [Parameter(Mandatory=$true)]
              $workItem,
              [Parameter(Mandatory=$true)]
              $authHeader,
              [Parameter(Mandatory=$true)]
              $orgUrl,
              [Parameter(Mandatory=$true)]
              $projectName
          )
          
          try {
              # Check if work item has any relations
              if (-not $workItem.relations) {
                  Write-Host "Work item $($workItem.id) has no relations"
                  return $null
              }

              # Find parent relation
              $parentRelation = $workItem.relations | Where-Object { $_.rel -eq "System.LinkTypes.Hierarchy-Reverse" } | Select-Object -First 1
              
              if (-not $parentRelation) {
                  Write-Host "Work item $($workItem.id) has no parent relation"
                  return $null
              }

              # Extract parent ID from URL
              $parentId = $parentRelation.url -split '/' | Select-Object -Last 1
              if (-not $parentId) {
                  Write-Host "Could not extract parent ID from relation URL"
                  return $null
              }

              # Get parent work item details
              $parentUri = "$orgUrl/$projectName/_apis/wit/workitems/$($parentId)?api-version=$WIT_API_VERSION"
              Write-Host "Fetching parent work item from: $parentUri"
              
              $parentItem = Invoke-RestMethod -Uri $parentUri -Headers $authHeader
              
              return @{
                  Id = $parentItem.id
                  Title = $parentItem.fields.'System.Title'
                  Type = $parentItem.fields.'System.WorkItemType'
                  Url = "$orgUrl/$projectName/_workitems/edit/$($parentItem.id)"
              }
          }
          catch {
              Write-Host "Error getting parent for work item $($workItem.id): $($_.Exception.Message)"
              return $null
          }
      }

      # Get linked work items with parent information
      Write-Host "Fetching linked work items..."
      $workItemsWithParents = @()
      
      if ($filteredPRs.Count -gt 0) {
          $prIds = $filteredPRs.pullRequestId -join ","
          Write-Host "Processing PRs: $prIds"
          
          foreach ($pr in $filteredPRs) {
              try {
                  Write-Host "Getting work items for PR $($pr.pullRequestId)"
                  $workItems = Invoke-RestMethod `
                      -Uri "$orgUrl/$PROJECT_NAME/_apis/git/repositories/$REPO_NAME/pullRequests/$($pr.pullRequestId)/workitems?api-version=$GIT_API_VERSION" `
                      -Headers $authHeader
                  
                  if ($workItems.value) {
                      $ids = $workItems.value.id -join ","
                      Write-Host "Getting details for work items: $ids"
                      
                      $items = Invoke-RestMethod `
                          -Uri "$orgUrl/_apis/wit/workitems?ids=$ids&`$expand=relations&api-version=$WIT_API_VERSION" `
                          -Headers $authHeader
                      
                      foreach ($item in $items.value) {
                          if ($item.fields.'System.WorkItemType' -in @('Product Backlog Item', 'Bug', 'Feature', 'Task', 'Issue')) {
                              $parentInfo = Get-ParentWorkItem -workItem $item -authHeader $authHeader -orgUrl $orgUrl -projectName $PROJECT_NAME
                              
                              $workItemsWithParents += [PSCustomObject]@{
                                  WorkItem = $item
                                  Parent = $parentInfo
                              }
                          }
                      }
                  }
              }
              catch {
                  Write-Host "Error processing PR $($pr.pullRequestId): $($_.Exception.Message)"
              }
          }
      }

      # Generate Markdown content
      Write-Host "Generating release notes..."
      $mdContent = "# Release Notes for $REPO_NAME`n`n"
      $mdContent += "**Release Range**: $previousTag to $latestTag`n"
      $mdContent += "**Date**: $(Get-Date -Format 'yyyy-MM-dd')`n"
      $mdContent += "**Commits Included**: $commitCount`n"
      $mdContent += "**Pull Requests Merged**: $prCount`n"
      $mdContent += "**Work Items Completed**: $($workItemsWithParents.Count)`n`n"

      if ($workItemsWithParents.Count -gt 0) {
          $mdContent += "## Work Items`n"

          # Group by Parent ID
          # Group and format work items by parent (deduplicated)
          Write-Host "Grouping and formatting work items..."

          # Remove duplicates based on WorkItem.id
          $uniqueWorkItems = $workItemsWithParents | Sort-Object { $_.WorkItem.id } -Unique

          $groupedByParent = $uniqueWorkItems | Group-Object { $_.Parent?.Id }

          $mdContent += "## Work Items`n"

          foreach ($group in $groupedByParent) {
              $parent = $group.Group[0].Parent
              if ($parent) {
                  $mdContent += "* ðŸ§© **$($parent.Type) #$($parent.Id)**: [$($parent.Title)]($($parent.Url))`n"
                  foreach ($item in $group.Group) {
                      $wi = $item.WorkItem
                      $mdContent += "  * ðŸ”§ **$($wi.fields.'System.WorkItemType') #$($wi.id)**: [$($wi.fields.'System.Title')]($orgUrl/$PROJECT_NAME/_workitems/edit/$($wi.id))`n"
                  }
                  $mdContent += "`n"
              } else {
                  # Orphan work items
                  foreach ($item in $group.Group) {
                      $wi = $item.WorkItem
                      $mdContent += "* ðŸ”§ **$($wi.fields.'System.WorkItemType') #$($wi.id)**: [$($wi.fields.'System.Title')]($orgUrl/$PROJECT_NAME/_workitems/edit/$($wi.id))`n"
                  }
                  $mdContent += "`n"
              }
          }
        }  

      if ($prCount -gt 0) {
          $mdContent += "## Pull Requests`n"
          $mdContent += ($filteredPRs | Sort-Object -Property pullRequestId | ForEach-Object {
              "* **PR #$($_.pullRequestId)**: [$($_.title)]($orgUrl/$PROJECT_NAME/_git/$REPO_NAME/pullrequest/$($_.pullRequestId)) (Created by $($_.createdBy.displayName) on $([datetime]$_.creationDate.ToString('yyyy-MM-dd')))"
          }) -join "`n"
          $mdContent += "`n`n"
      }

      $mdContent += "[[_Back to Releases|Home]]`n"

      # Save to artifact directory
      $artifactFilePath = "$ARTIFACT_DIR/$REPO_NAME-$latestTag.md"
      Write-Host "Saving release notes to artifact: $artifactFilePath"
      $mdContent | Out-File -FilePath $artifactFilePath -Encoding utf8

      # Set variables for next steps
      Write-Host "##vso[task.setvariable variable=RELEASE_NOTES_CONTENT]$mdContent"
      Write-Host "##vso[task.setvariable variable=RELEASE_NOTES_FILE]$artifactFilePath"
      Write-Host "##vso[task.setvariable variable=RELEASE_NOTES_PATH]$WIKI_FOLDER/$REPO_NAME-$latestTag"
