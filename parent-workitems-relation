# Work Items Tree
        if ($filteredWorkItems.Count -gt 0) {
            Write-Host "üìÇ Building full hierarchical work item tree..."

            # Get all work items and their relationships
            $allWorkItems = @{}
            $childToParentMap = @{}
            $parentToChildrenMap = @{}
            
            # First pass - collect all work items with validation
            foreach ($item in $filteredWorkItems) {
                if ($item -and $item.id -and $item.fields) {
                    $allWorkItems[$item.id] = $item
                }
            }

            # Second pass - build relationship maps with robust error handling
            foreach ($item in $filteredWorkItems) {
                if (-not $item -or -not $item.id) { continue }
                
                $itemId = $item.id
                
                try {
                    # Get work item with full relations
                    $wiWithRelations = Invoke-RestMethod `
                        -Uri "$orgUrl/$PROJECT_NAME/_apis/wit/workitems/$($itemId)?`$expand=relations&api-version=$WIT_API_VERSION" `
                        -Headers $authHeader `
                        -ErrorAction Stop
                    
                    if ($wiWithRelations.relations) {
                        foreach ($relation in $wiWithRelations.relations) {
                            if ($relation.rel -eq "System.LinkTypes.Hierarchy-Reverse") {
                                try {
                                    # This is a child item (relation points to parent)
                                    $parentId = [int]($relation.url -split '/')[-1]
                                    $childToParentMap[$itemId] = $parentId
                                    
                                    if (-not $parentToChildrenMap.ContainsKey($parentId)) {
                                        $parentToChildrenMap[$parentId] = @()
                                    }
                                    $parentToChildrenMap[$parentId] += $itemId
                                    
                                    # Only fetch parent if it's not already in our collection
                                    if (-not $allWorkItems.ContainsKey($parentId)) {
                                        try {
                                            $parentItem = Invoke-RestMethod `
                                                -Uri "$orgUrl/$PROJECT_NAME/_apis/wit/workitems/$($parentId)?api-version=$WIT_API_VERSION" `
                                                -Headers $authHeader `
                                                -ErrorAction Stop
                                            
                                            if ($parentItem -and $parentItem.id -and $parentItem.fields) {
                                                $allWorkItems[$parentId] = $parentItem
                                                Write-Host "‚úÖ Found parent item $parentId for child $itemId"
                                            }
                                        } catch {
                                            Write-Host "‚ö†Ô∏è Could not fetch parent item ${parentId}: $($_.Exception.Message)"
                                            # Add minimal placeholder for the parent
                                            $allWorkItems[$parentId] = @{
                                                id = $parentId
                                                fields = @{
                                                    'System.WorkItemType' = 'Unknown'
                                                    'System.Title' = '[Parent not accessible]'
                                                }
                                                url = "$orgUrl/$PROJECT_NAME/_workitems/edit/$parentId"
                                            }
                                        }
                                    }
                                } catch {
                                    Write-Host "‚ö†Ô∏è Error processing relation for item ${itemId}: $($_.Exception.Message)"
                                }
                            }
                        }
                    }
                } catch {
                    Write-Host "‚ö†Ô∏è Failed to fetch relations for item ${itemId}: $($_.Exception.Message)"
                }
            }

            # Define emoji map for work item types
            $emojiMap = @{
                'Epic'    = 'üì¶'
                'Feature' = 'üåü'
                'Product Backlog Item' = 'üìå'
                'Bug'     = 'üêû'
                'Task'    = 'üîß'
                'Issue'   = '‚ùó'
                'Unknown' = '‚ùì'
            }

            # Safe function to recursively build the hierarchy
            function Build-WorkItemHierarchy {
                param (
                    [Parameter(Mandatory)][int]$itemId,
                    [Parameter(Mandatory)][hashtable]$allItems,
                    [Parameter(Mandatory)][hashtable]$childToParentMap,
                    [Parameter(Mandatory)][hashtable]$parentToChildrenMap,
                    [Parameter(Mandatory)][hashtable]$emojiMap,
                    [int]$level = 0
                )

                try {
                    if (-not $allItems.ContainsKey($itemId)) {
                        Write-Host "‚ö†Ô∏è Item $itemId not found in collection"
                        return ""
                    }

                    $item = $allItems[$itemId]
                    if (-not $item -or -not $item.fields) {
                        return ""
                    }

                    $indent = '    ' * $level
                    $type = $item.fields.'System.WorkItemType' ?? 'Unknown'
                    $icon = $emojiMap[$type] ?? 'üîπ'

                    $treeItem = "$indent- $icon **$type #$($item.id)**: [$($item.fields.'System.Title')]($($item.url ?? "$orgUrl/$PROJECT_NAME/_workitems/edit/$itemId"))`n"

                    # Safely add children if this item has any
                    if ($parentToChildrenMap.ContainsKey($itemId)) {
                        foreach ($childId in $parentToChildrenMap[$itemId] | Sort-Object) {
                            if ($allItems.ContainsKey($childId)) {
                                $treeItem += Build-WorkItemHierarchy `
                                    -itemId $childId `
                                    -allItems $allItems `
                                    -childToParentMap $childToParentMap `
                                    -parentToChildrenMap $parentToChildrenMap `
                                    -emojiMap $emojiMap `
                                    -level ($level + 1)
                            }
                        }
                    }

                    return $treeItem
                } catch {
                    Write-Host "‚ö†Ô∏è Error in Build-WorkItemHierarchy for item ${itemId}: $_"
                    return ""
                }
            }

            $mdContent += "`n## üìå **Work Items (Hierarchical Structure)**`n"
            
            # Find root items (items without parents in our set)
            $rootItems = @()
            foreach ($id in $allWorkItems.Keys) {
                if (-not $childToParentMap.ContainsKey($id)) {
                    $rootItems += $allWorkItems[$id]
                }
            }

            # Debug output
            Write-Host "Discovered work items: $($allWorkItems.Count)"
            Write-Host "Child-parent relationships: $($childToParentMap.Count)"
            Write-Host "Parent-child relationships: $($parentToChildrenMap.Count)"
            Write-Host "Root items found: $($rootItems.Count)"

            if ($rootItems.Count -gt 0) {
                foreach ($rootItem in $rootItems | Sort-Object { $_.fields.'System.WorkItemType' }) {
                    $hierarchy = Build-WorkItemHierarchy `
                        -itemId $rootItem.id `
                        -allItems $allWorkItems `
                        -childToParentMap $childToParentMap `
                        -parentToChildrenMap $parentToChildrenMap `
                        -emojiMap $emojiMap
                    
                    if (-not [string]::IsNullOrEmpty($hierarchy)) {
                        $mdContent += $hierarchy
                    }
                }
            } else {
                # Fallback with relationship information
                $mdContent += "_Showing flat list with parent references_`n"
                foreach ($item in $allWorkItems.Values | Sort-Object { $_.fields.'System.WorkItemType' }) {
                    $type = $item.fields.'System.WorkItemType' ?? 'Unknown'
                    $icon = $emojiMap[$type] ?? 'üîπ'
                    $parentInfo = ""
                    if ($childToParentMap.ContainsKey($item.id)) {
                        $parentId = $childToParentMap[$item.id]
                        $parentInfo = " (child of #$parentId)"
                    }
                    $mdContent += "- $icon **$type #$($item.id)$parentInfo**: [$($item.fields.'System.Title')]($($item.url ?? "$orgUrl/$PROJECT_NAME/_workitems/edit/$($item.id)"))`n"
                }
            }
        }
